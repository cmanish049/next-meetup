{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/manish/Projects/nextjs/next-2/pages/[meetupId]/index.js\";\nimport React from \"react\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = props => {\n  console.log(props.meetupData.title);\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    title: props.title,\n    address: props.address,\n    description: props.description,\n    image: props.image\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://manish1234:manish1234@learning.yemzn.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const meetups = await meetupCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    // list all param id values if false, no need if true\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://manish1234:manish1234@learning.yemzn.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  console.log(selectedMeetup);\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        description: selectedMeetup.description,\n        image: selectedMeetup.image\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/manish/Projects/nextjs/next-2/pages/[meetupId]/index.js"],"names":["React","MongoClient","ObjectId","MeetupDetail","MeetupDetails","props","console","log","meetupData","title","address","description","image","getStaticPaths","client","connect","db","meetupCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,UAAN,CAAiBC,KAA7B;AACA,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEJ,KAAK,CAACI,KADf;AAEE,IAAA,OAAO,EAAEJ,KAAK,CAACK,OAFjB;AAGE,IAAA,WAAW,EAAEL,KAAK,CAACM,WAHrB;AAIE,IAAA,KAAK,EAAEN,KAAK,CAACO;AAJf;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAVD;;AAYA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMb,WAAW,CAACc,OAAZ,CACnB,oGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AACA,QAAMC,OAAO,GAAG,MAAMF,gBAAgB,CAACG,IAAjB,CAAsB,EAAtB,EAA0B;AAACC,IAAAA,GAAG,EAAE;AAAN,GAA1B,EAAoCC,OAApC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AACY;AACjBC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAYC,MAAM,KAAK;AAACC,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAX;AAAT,KAAL,CAAlB;AAFF,GAAP;AAID;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACA,QAAMf,MAAM,GAAG,MAAMb,WAAW,CAACc,OAAZ,CACnB,oGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AACA,QAAMe,cAAc,GAAG,MAAMhB,gBAAgB,CAACiB,OAAjB,CAAyB;AAACb,IAAAA,GAAG,EAAEnB,QAAQ,CAAC2B,QAAD;AAAd,GAAzB,CAA7B;AACAvB,EAAAA,OAAO,CAACC,GAAR,CAAY0B,cAAZ;AAEAnB,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACLlB,IAAAA,KAAK,EAAE;AACLG,MAAAA,UAAU,EAAE;AACV2B,QAAAA,EAAE,EAAEF,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADM;AAEVrB,QAAAA,KAAK,EAAEwB,cAAc,CAACxB,KAFZ;AAGVE,QAAAA,WAAW,EAAEsB,cAAc,CAACtB,WAHlB;AAIVC,QAAAA,KAAK,EAAEqB,cAAc,CAACrB;AAJZ;AADP;AADF,GAAP;AAUD;AAED,eAAeR,aAAf","sourcesContent":["import React from \"react\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = (props) => {\n  console.log(props.meetupData.title);\n  return (\n    <MeetupDetail\n      title={props.title}\n      address={props.address}\n      description={props.description}\n      image={props.image}\n    />\n  );\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://manish1234:manish1234@learning.yemzn.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const meetups = await meetupCollection.find({}, {_id: 1}).toArray();\n  client.close();\n  return {\n    fallback: false, // list all param id values if false, no need if true\n    paths: meetups.map(meetup => ({params: {meetupId: meetup._id.toString()}}))\n  };\n}\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\n    \"mongodb+srv://manish1234:manish1234@learning.yemzn.mongodb.net/meetups?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupCollection.findOne({_id: ObjectId(meetupId)});\n  console.log(selectedMeetup);\n\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        description: selectedMeetup.description,\n        image: selectedMeetup.image,\n      },\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}